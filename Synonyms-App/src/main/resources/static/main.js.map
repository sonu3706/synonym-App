{"version":3,"sources":["webpack:///./src/$_lazy_route_resource lazy namespace object","webpack:///./src/app/app-routing.module.ts","webpack:///./src/app/app.component.css","webpack:///./src/app/app.component.html","webpack:///./src/app/app.component.ts","webpack:///./src/app/app.module.ts","webpack:///./src/app/home/home.component.css","webpack:///./src/app/home/home.component.html","webpack:///./src/app/home/home.component.ts","webpack:///./src/app/interceptor/http-interceptor.ts","webpack:///./src/app/interceptor/tokenInterceptor.service.ts","webpack:///./src/app/login/login.component.css","webpack:///./src/app/login/login.component.html","webpack:///./src/app/login/login.component.ts","webpack:///./src/app/login/user.ts","webpack:///./src/app/service/home.service.ts","webpack:///./src/app/service/login.service.ts","webpack:///./src/app/token-storage.service.ts","webpack:///./src/environments/environment.ts","webpack:///./src/main.ts"],"names":[],"mappings":"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","file":"main.js","sourcesContent":["function webpackEmptyAsyncContext(req) {\n\t// Here Promise.resolve().then() is used instead of new Promise() to prevent\n\t// uncaught exception popping up in devtools\n\treturn Promise.resolve().then(function() {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t});\n}\nwebpackEmptyAsyncContext.keys = function() { return []; };\nwebpackEmptyAsyncContext.resolve = webpackEmptyAsyncContext;\nmodule.exports = webpackEmptyAsyncContext;\nwebpackEmptyAsyncContext.id = \"./src/$$_lazy_route_resource lazy recursive\";","import { NgModule } from '@angular/core';\nimport { RouterModule, Routes } from '@angular/router';\nimport { LoginComponent } from './login/login.component';\nimport { HomeComponent } from './home/home.component';\n\n\n\n\nconst routes: Routes = [\n  {path: 'login', component: LoginComponent},\n   {path: 'home',component:HomeComponent},\n  {path: '', redirectTo: '/login', pathMatch: 'full'}\n];\n\n@NgModule({\n  imports: [\n    RouterModule.forRoot(routes)\n  ],\n  exports: [RouterModule],\n  declarations: []\n})\nexport class AppRoutingModule { }\n\n\n\n","module.exports = \"\"","module.exports = \"<router-outlet></router-outlet>\"","import { Component } from '@angular/core';\n\n@Component({\n  selector: 'app-root',\n  templateUrl: './app.component.html',\n  styleUrls: ['./app.component.css']\n})\nexport class AppComponent {\n  title = 'synonyms-Frontend';\n}\n","import { BrowserModule } from '@angular/platform-browser';\nimport { NgModule } from '@angular/core';\n\nimport { AppComponent } from './app.component';\nimport { BrowserAnimationsModule } from '@angular/platform-browser/animations';\nimport { LoginComponent } from './login/login.component';\nimport {MatCardModule} from '@angular/material/card';\nimport {MatFormFieldModule, MatInputModule} from '@angular/material';\nimport {MatButtonModule} from '@angular/material/button';\nimport { FormsModule } from '@angular/forms';\nimport { TokenStorageService } from './token-storage.service';\nimport { HttpClientModule } from '@angular/common/http';\nimport { AppRoutingModule } from './/app-routing.module';\nimport { HomeComponent } from './home/home.component';\nimport { httpInterceptorProviders } from './interceptor/http-interceptor';\n\n\n\n\n\n@NgModule({\n  declarations: [\n    AppComponent,\n    LoginComponent,\n    HomeComponent\n  ],\n  imports: [\n    BrowserModule,\n    BrowserAnimationsModule,\n    MatCardModule,\n    MatFormFieldModule,\n    MatInputModule,\n    MatButtonModule,\n    FormsModule,\n    HttpClientModule,\n    AppRoutingModule\n  ],\n  providers: [TokenStorageService, httpInterceptorProviders],\n  bootstrap: [AppComponent]\n})\nexport class AppModule { }\n","module.exports = \".input-card {\\n    max-width: 400px;\\n    padding: 20px;\\n    margin: 550px;\\n  }\\n  \\n\"","module.exports = \"<mat-card class=\\\"input-card\\\">\\n  <mat-card-header>\\n    <mat-card-title>Enter the word</mat-card-title>\\n    <mat-form-field>\\n      <input matInput placeholder=\\\"Word\\\" [(ngModel)]=\\\"word\\\">\\n\\n    </mat-form-field>\\n    <button mat-button (click)=\\\"getWord()\\\"> submit</button>\\n  </mat-card-header>\\n  <mat-card-content *ngFor=\\\"let singleWord of words\\\">\\n    {{singleWord}}\\n  </mat-card-content>\\n\\n</mat-card>\"","import { Component, OnInit } from \"@angular/core\";\nimport { HomeService } from \"../service/home.service\";\n\n@Component({\n  selector: \"app-home\",\n  templateUrl: \"./home.component.html\",\n  styleUrls: [\"./home.component.css\"]\n})\nexport class HomeComponent implements OnInit {\n  private word: string = \"\";\n  words: string[];\n  constructor(private homeService: HomeService) {}\n\n  ngOnInit() {}\n\n  getWord() {\n    console.log(this.word);\n    this.homeService.getWord(this.word).subscribe(data => {\n      this.words = data;\n    });\n  }\n}\n","import { TokenInterceptor } from \"./tokenInterceptor.service\";\n/* \"Barrel\" of Http Interceptors */\nimport { HTTP_INTERCEPTORS } from \"@angular/common/http\";\n\n/** Http interceptor providers in outside-in order */\nexport const httpInterceptorProviders = [\n  { provide: HTTP_INTERCEPTORS, useClass: TokenInterceptor, multi: true }\n];\n","import { Observable } from \"rxjs\";\nimport {\n  HttpHandler,\n  HttpEvent,\n  HttpErrorResponse\n} from \"@angular/common/http\";\nimport { HttpRequest } from \"@angular/common/http\";\nimport { HttpInterceptor } from \"@angular/common/http\";\nimport { Injectable } from \"@angular/core\";\nimport { Router } from \"@angular/router\";\nimport { catchError, tap } from \"rxjs/operators\";\nimport { TokenStorageService } from \"../token-storage.service\";\n\nconst TOKEN_HEADER_KEY = \"Authorization\";\n\n@Injectable()\nexport class TokenInterceptor implements HttpInterceptor {\n  constructor(private token: TokenStorageService, private router: Router) {}\n  intercept(\n    request: HttpRequest<any>,\n    next: HttpHandler\n  ): Observable<HttpEvent<any>> {\n    let authRequest = request;\n    if (this.token.getToken() != null) {\n      authRequest = request.clone({\n        headers: request.headers.set(\n          TOKEN_HEADER_KEY,\n          `Bearer ${this.token.getToken()}`\n        )\n      });\n    }\n\n    return next.handle(authRequest).pipe(\n      tap((err: any) => {\n        if (err instanceof HttpErrorResponse) {\n          if (err.status === 401) {\n            this.router.navigate([\"/login\"]);\n          }\n        }\n      })\n    );\n  }\n}\n","module.exports = \".login-card {\\n    max-width: 400px;\\n    padding: 20px;\\n    margin: 550px;\\n  }\\n  \\n\"","module.exports = \"<mat-card class=\\\"login-card\\\">\\n    <mat-card-header>\\n        <mat-card-title>Login</mat-card-title>\\n    </mat-card-header>\\n    <mat-card-content>\\n        <mat-form-field appearance=\\\"outline\\\">\\n            <mat-label>UserName</mat-label>\\n            <input matInput placeholder=\\\"User-Name\\\" [(ngModel)]=\\\"userId\\\">\\n        </mat-form-field>\\n\\n        <mat-form-field appearance=\\\"outline\\\">\\n                <mat-label>Pasword</mat-label>\\n                <input matInput placeholder=\\\"Password\\\" [(ngModel)]=\\\"password\\\">\\n            </mat-form-field>\\n\\n    </mat-card-content>\\n    <mat-card-actions>\\n        <button mat-raised-button color=\\\"primary\\\" (click)=\\\"loginFunction()\\\">Login</button>\\n    </mat-card-actions>\\n</mat-card>\"","import { Component, OnInit } from \"@angular/core\";\nimport { LoginService } from \"../service/login.service\";\nimport { TokenStorageService } from \"../token-storage.service\";\nimport { User } from \"./user\";\nimport { Router } from \"@angular/router\";\n\n@Component({\n  selector: \"app-login\",\n  templateUrl: \"./login.component.html\",\n  styleUrls: [\"./login.component.css\"]\n})\nexport class LoginComponent implements OnInit {\n  private userId: string = \"\";\n  private password: string = \"\";\n  private user: User = new User();\n\n  constructor(\n    private loginService: LoginService,\n    private token: TokenStorageService,\n    private router: Router\n  ) {}\n\n  ngOnInit() {}\n\n  loginFunction() {\n    console.log(this.userId);\n    this.user.userId = this.userId;\n    this.user.userPassword = this.password;\n    this.loginService.login(this.user).subscribe(data => {\n      this.token.saveToken(data[\"token\"]);\n      this.router.navigate([\"home\"]);\n    });\n  }\n}\n","export class User{\n    public userId:string;\n    public userPassword:string;\n}","import { Injectable } from \"@angular/core\";\nimport { HttpHeaders, HttpClient } from \"@angular/common/http\";\nimport { Observable } from \"rxjs\";\nimport { TokenStorageService } from \"../token-storage.service\";\n\nconst httpOptions = {\n  headers: new HttpHeaders({ \"Content-type\": \"application/json\" })\n};\n\n@Injectable({\n  providedIn: \"root\"\n})\nexport class HomeService {\n  private wordUrl: string = \"http://localhost:8081/api/v1/word/\";\n\n  constructor(\n    private http: HttpClient,\n    private tokeService: TokenStorageService\n  ) {}\n\n  getWord(word: string): Observable<any> {\n    return this.http.get<any>(this.wordUrl + word, httpOptions);\n  }\n}\n","import { Injectable } from \"@angular/core\";\nimport { HttpClient, HttpHeaders } from \"@angular/common/http\";\nimport { Observable } from \"rxjs\";\nimport { User } from \"../login/user\";\n\nconst httpOptions = {\n  headers: new HttpHeaders({ \"Content-type\": \"application/json\" })\n};\n\n@Injectable({\n  providedIn: \"root\"\n})\nexport class LoginService {\n  private loginUrl: string = \"http://localhost:8081/api/v1/user\";\n\n  constructor(private http: HttpClient) {}\n\n  login(user: User): Observable<any> {\n    return this.http.post<any>(this.loginUrl, user, httpOptions);\n  }\n}\n","import { Injectable } from '@angular/core';\n\nconst TOKEN_KEY = 'AuthToken';\n\n@Injectable()\nexport class TokenStorageService {\n\n  constructor() { }\n\n  public saveToken(token: string){\n    window.sessionStorage.removeItem(TOKEN_KEY)\n    window.sessionStorage.setItem(TOKEN_KEY,token);\n    \n}\n\npublic getToken(): string {\n\n    return sessionStorage.getItem(TOKEN_KEY);\n\n}\n\n\n}\n","// This file can be replaced during build by using the `fileReplacements` array.\n// `ng build ---prod` replaces `environment.ts` with `environment.prod.ts`.\n// The list of file replacements can be found in `angular.json`.\n\nexport const environment = {\n  production: false\n};\n\n/*\n * In development mode, to ignore zone related error stack frames such as\n * `zone.run`, `zoneDelegate.invokeTask` for easier debugging, you can\n * import the following file, but please comment it out in production mode\n * because it will have performance impact when throw error\n */\n// import 'zone.js/dist/zone-error';  // Included with Angular CLI.\n","import { enableProdMode } from '@angular/core';\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\n\nimport { AppModule } from './app/app.module';\nimport { environment } from './environments/environment';\n\nif (environment.production) {\n  enableProdMode();\n}\n\nplatformBrowserDynamic().bootstrapModule(AppModule)\n  .catch(err => console.log(err));\n"],"sourceRoot":""}